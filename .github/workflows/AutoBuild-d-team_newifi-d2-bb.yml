###########################################################
#  OpenWrt 自动编译工作流 - Newifi D2 专用版
#  功能特性：
#  - 支持多配置编译（标准版/精简版/Clash集成版）
#  - 智能磁盘空间管理
#  - 编译缓存加速
#  - 自动化固件发布（Releases/Artifacts）
#  - 失败通知机制
###########################################################

name: 🚀 OpenWrt Builder - Newifi D2

on:
  # 触发方式配置
  workflow_dispatch:    # 手动触发
    inputs: {...}       # 保留原有输入参数
  
  schedule:             # 每周五 UTC 8:00 自动编译
    - cron: '0 8 * * 5'
  
  push:                 # 推送至 master 分支触发
    branches: [master]
  
  watch:                # Star 仓库触发
    types: [started]

env:
  # 全局配置参数
  CONFIG_FILE: d-team_newifi-d2        # 默认配置文件
  DEFAULT_SOURCE: coolsnowwolf/lede@master  # 源码仓库
  CCACHE_DIR: /github/workspace/.ccache     # 缓存目录
  DELETE_OLD_WORKFLOW_DAYS: 7              # 日志保留天数

jobs:
  Compile:
    name: 🛠️ 固件编译
    runs-on: ubuntu-20.04
    timeout-minutes: 120  # 超时设置

    steps:
    # 阶段 1: 初始化环境
    - name: 🏗️ 准备编译环境
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整提交历史

    # 阶段 2: 磁盘空间优化
    - name: 🧹 深度清理磁盘
      uses: ScribeMD/cleanup-disk-space@v2.2.1
      with:
        cleanup: true
        verbose: true
        folders: |
          /usr/local/lib/android
          /opt/ghc
          /usr/local/lib/node_modules
        reserve-mb: 5120  # 保留最小空间

    # 阶段 3: 安装编译依赖
    - name: 📦 安装系统依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential ccache flex bison git g++-multilib \
          gcc-multilib gettext libncurses5-dev libssl-dev \
          python3-distutils rsync unzip zlib1g-dev file wget \
          qemu-utils upx libelf-dev automake autoconf

    # 阶段 4: 源码管理
    - name: 📥 克隆 OpenWrt 源码
      run: |
        git clone --depth 1 \
          -b master \
          https://github.com/${{ env.DEFAULT_SOURCE }} \
          openwrt

    # 阶段 5: 缓存配置
    - name: ⚡ 启用编译缓存
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.CCACHE_DIR }}
          openwrt/dl
        key: ${{ runner.os }}-openwrt-${{ hashFiles('Configs/*') }}

    # 阶段 6: 应用设备配置
    - name: ⚙️ 加载设备配置
      run: |
        cd openwrt
        cp ../Configs/${{ env.CONFIG_FILE }} .config
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        make defconfig

    # 阶段 7: 编译过程
    - name: 🔨 执行编译任务
      run: |
        cd openwrt
        export PATH="/usr/lib/ccache:$PATH"
        make -j$(($(nproc) + 1)) \
          || make -j1 V=s  # 降级模式

    # 阶段 8: 产物处理
    - name: 📦 打包固件文件
      if: success()
      run: |
        cd openwrt/bin/targets/ramips/mt7621
        FIRMWARE_NAME="NewifiD2_${CONFIG_FILE}_$(date +%Y%m%d).bin"
        mv *-sysupgrade.bin $FIRMWARE_NAME
        echo "FIRMWARE=$FIRMWARE_NAME" >> $GITHUB_ENV

    # 阶段 9: 发布管理
    - name: 🚀 发布到 GitHub Releases
      uses: softprops/action-gh-release@v1
      if: success()
      with:
        tag_name: autobuild-${{ github.run_id }}
        files: openwrt/bin/targets/ramips/mt7621/${{ env.FIRMWARE }}
        body: |
          ### 🚀 自动编译固件
          - 设备型号: Newifi D2  
          - 编译时间: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
          - 源码版本: ${{ env.DEFAULT_SOURCE }}

    # 阶段 10: 失败处理
    - name: 🚨 编译失败通知
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: '❌ 编译失败! 查看日志: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          })

    # 阶段 11: 日志清理
    - name: 🗑️ 清理历史日志
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: ${{ env.DELETE_OLD_WORKFLOW_DAYS }}
        keep_minimum_runs: 5
